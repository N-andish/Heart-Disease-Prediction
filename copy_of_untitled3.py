# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEM_VIOL2TsivHZOlY53kID6vKZhaWBR

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.datasets import make_classification
from sklearn.metrics import roc_curve, auc, precision_recall_curve

"""Data Collection and Processing"""

#loading the csv data to a Pandas Dataframe
heart_data = pd.read_csv('/content/heart_disease_data.csv')

#print first 5 rows of the dataset
heart_data.head()

#print last 5 rows of the dataset
heart_data.tail()

#number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

#statistical measures about the data
heart_data.describe()

# checking the distribution of target variable
heart_data['target'].value_counts()

"""1-->Defective Heart

0-->Healthy Heart

Distrubution of Target Class
"""

import matplotlib.pyplot as plt
sns.countplot(x='target', data=heart_data)
plt.title('Distribution of Target classes')
plt.xlabel('Target')
plt.ylabel('Count')
plt.show()

"""Splitting the features and target"""

x = heart_data.drop(columns='target',axis=1)
y = heart_data['target']

print(x)

print(y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

"""Boxplots for few features"""

import matplotlib.pyplot as plt
for col in ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']:
    plt.figure(figsize=(5, 5))
    sns.boxplot(x='target', y=col, data=heart_data)
    plt.show()

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

#training the Logisticregression model with Training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:',training_data_accuracy)

#accuracy on testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ',test_data_accuracy)

"""Confusion Matrix and Classification Report for Testing data




"""

#prediction value
y_pred = model.predict(X_test)
#generating confusion matrix
cm = confusion_matrix(Y_test, y_pred)
# Display the confusion matrix
print("Confusion Matrix:")
print(cm)

print("\nClassification Report:")
print(classification_report(Y_test, y_pred))


plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=heart_data.target[:2], yticklabels=heart_data.target[:2])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""Building the predictive system"""

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)

#change input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction =model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]-- 0):
  print('The person does not have a heart disease')
else:
  print('The Person has Heart Disease')